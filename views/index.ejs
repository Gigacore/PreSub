<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Metadata Anonymity Checker Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col items-center justify-center">
    <div class="w-full max-w-4xl p-6 bg-white rounded-lg shadow-lg mb-4">
        <h1 class="text-2xl font-bold mb-4 text-center">Metadata Anonymity Checker Tool</h1>

        <!-- Drag-and-Drop Zone -->
        <form id="uploadForm" method="post" enctype="multipart/form-data" action="/upload">
            <div id="dropZone" class="w-full h-32 border-4 border-dashed border-gray-400 flex items-center justify-center cursor-pointer bg-gray-50">
                <p class="text-gray-600">Drag & drop your files here</p>
                <input type="file" name="file" id="fileInput" class="hidden" onchange="document.getElementById('uploadForm').submit();" />
            </div>
        </form>

        <!-- Warning Banner -->
        <% if (warning) { %>
            <div id="warning-banner" class="mt-4 p-4 bg-red-100 border border-red-400 text-red-700">
                Warning: Critical metadata fields detected that may compromise anonymity.
            </div>
        <% } %>

        <!-- Metadata Table -->
        <div id="metadata" class="mt-6">
            <% if (metadata) { %>
                <table id="metadata-table" class="min-w-full bg-white">
                    <thead>
                        <tr>
                            <th class="py-2 text-left">Field</th>
                            <th class="py-2 text-left">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% 
                            // Define critical fields and ensure lastModifiedBy is included
                            const criticalFields = ['author', 'lastmodifiedby', 'producer', 'creator'];
                            // Sort metadata keys to show critical fields at the top
                            const sortedKeys = [...Object.keys(metadata)].sort((a, b) => {
                                const isACritical = criticalFields.includes(a.toLowerCase());
                                const isBCritical = criticalFields.includes(b.toLowerCase());
                                return (isACritical === isBCritical) ? 0 : (isACritical ? -1 : 1);
                            });

                            sortedKeys.forEach(key => {
                                const isCritical = criticalFields.includes(key.toLowerCase());
                        %>
                            <tr class="<%= isCritical && metadata[key] ? 'bg-red-100' : '' %>">
                                <td class="border px-4 py-2"><%= key %></td>
                                <td class="border px-4 py-2"><%= metadata[key] || 'N/A' %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } %>
        </div>

        <!-- Disclaimer -->
        <footer class="mt-6 text-gray-600 text-xs text-center">
            Disclaimer: This tool provides basic metadata checks. Authors should still perform thorough reviews before publishing to ensure compliance with anonymity guidelines. 
        </footer>
    </div>

    <!-- GitHub Link -->
    <div class="text-center mt-4">
        <a href="https://github.com/Gigacore/metadata-anonymity-checker" class="text-gray-500 text-xs" target="_blank">View on GitHub</a>
    </div>

    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');

        // Prevent default behavior (Prevent file from being opened)
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, (e) => e.preventDefault());
            dropZone.addEventListener(eventName, (e) => e.stopPropagation());
        });

        // Highlight drop area when file is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => dropZone.classList.add('dragover'));
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => dropZone.classList.remove('dragover'));
        });

        // Handle dropped file
        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            const files = e.dataTransfer.files;
            if (files.length) {
                fileInput.files = files;
                document.getElementById('uploadForm').submit();
            }
        });

        // Handle click on the drop zone to open file dialog
        dropZone.addEventListener('click', () => {
            fileInput.click();
        });
    </script>
</body>
</html>
